[tox]
requires =
    tox>=4.23.2
    tox-extra>=2.0.2
    tox-uv>=1.20.2
env_list =
    py
    deps
    devel
    docs
    lint
    milestone
    pkg
skip_missing_interpreters = true

[testenv]
description =
    Run pytest
    devel: with ansible devel branch
package = editable
deps =
    devel: ansible-core @ git+https://github.com/ansible/ansible.git  # GPLv3+
extras =
    test
pass_env =
    CI
    CONTAINER_*
    DOCKER_*
    GITHUB_*
    HOME
    PYTEST_*
    SSH_AUTH_SOCK
    TERM
    USER
set_env =
    COVERAGE_COMBINED = {env_dir}/.coverage
    COVERAGE_FILE = {env:COVERAGE_FILE:{env_dir}/.coverage.{env_name}}
    COVERAGE_PROCESS_START = {tox_root}/pyproject.toml
    FORCE_COLOR = 1
    PIP_CONSTRAINT = {tox_root}/.config/constraints.txt
    PRE_COMMIT_COLOR = always
    TERM = xterm-256color
    UV_CONSTRAINT = {tox_root}/.config/constraints.txt
    deps, lint, milestone: PIP_CONSTRAINT = /dev/null
    deps, lint, milestone: UV_CONSTRAINT = /dev/null
commands_pre =
    py: sh -c "rm -f {env_dir}/.coverage* coverage.xml 2>/dev/null || true"
    py: coverage erase
commands =
    python -c 'import pathlib; pathlib.Path("{env_site_packages_dir}/cov.pth").write_text("import coverage; coverage.process_startup()")'
    coverage run -m pytest {posargs}
    coverage combine -q --data-file={env:COVERAGE_COMBINED}
    coverage xml --data-file={env:COVERAGE_COMBINED} -o {env_dir}/coverage.xml --fail-under=0
    coverage lcov --data-file={env:COVERAGE_COMBINED} -o {tox_root}/.cache/.coverage/lcov.info --fail-under=0
    coverage report --data-file={env:COVERAGE_COMBINED}
allowlist_externals =
    git
    rm
    sh

[testenv:deps]
description = Bump all dependencies
base_python = python3.10
skip_install = true
deps =
    {[testenv:lint]deps}
extras =
commands_pre =
commands =
    -pre-commit run --all-files --show-diff-on-failure --hook-stage manual deps
    -pre-commit autoupdate
    git diff --exit-code
env_dir = {toxworkdir}/lint

[testenv:docs]
description = Builds docs
package = editable
skip_install = false
extras =
    docs
set_env =
    DYLD_FALLBACK_LIBRARY_PATH = /opt/homebrew/lib:{env:LD_LIBRARY_PATH}
    NO_COLOR = 1
    TERM = dump
commands =
    mkdocs build {posargs:--strict --site-dir=_readthedocs/html/}

[testenv:lint]
description = Enforce quality standards
skip_install = true
deps =
    pre-commit
    pre-commit-uv
commands =
    pre-commit run --show-diff-on-failure --all-files

[testenv:milestone]
description =
    Run tests with ansible-core milestone branch and without dependencies constraints
deps =
    ansible-core@ https://github.com/ansible/ansible/archive/milestone.tar.gz

[testenv:pkg]
description =
    Do packaging/distribution
skip_install = true
deps =
    build>=0.9
    twine >= 4.0.2  # pyup: ignore
set_env =
commands =
    rm -rfv {tox_root}/dist/
    python -m build --outdir {tox_root}/dist/ {tox_root}
    sh -c "python -m twine check --strict {tox_root}/dist/*"
